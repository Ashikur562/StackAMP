{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2u8YWLDDLVQV"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sb"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "!pip install catboost"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XzmY23SGXfIj",
        "outputId": "ed3426ba-32e8-4247-a47c-ed6046cb9fa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.1-cp310-cp310-manylinux2014_x86_64.whl (98.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m11.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.23.5)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.5.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.10.1)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.3)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.1.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.11.0)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.42.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (23.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.3)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, cohen_kappa_score\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import matthews_corrcoef\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from catboost import CatBoostClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import StackingClassifier\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score, cross_val_predict"
      ],
      "metadata": {
        "id": "osmyhTqzXh30"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "estimator = [('RF', RandomForestClassifier(n_estimators = 450, max_depth = 9)), ('XGB', XGBClassifier(n_estimators = 350,max_depth = 7, base_score = 0.5, learning_rate = 0.1)),\n",
        "             ('Cat', CatBoostClassifier(depth= 7, iterations = 45, learning_rate = 0.35)), ('LGBM', LGBMClassifier(learning_rate = 0.1,max_depth = 7,random_state = 50)),\n",
        "             ('ETC', ExtraTreesClassifier(n_estimators = 450, max_depth = 7)),('KNN', KNeighborsClassifier(n_neighbors=5)),\n",
        "             ('ADB', AdaBoostClassifier(n_estimators = 350, learning_rate = 0.5, random_state = 50))]\n",
        "Stacking = StackingClassifier( estimators=estimator, final_estimator= XGBClassifier(n_estimators = 350,max_depth = 7, base_score = 0.5, learning_rate = 0.1))"
      ],
      "metadata": {
        "id": "4cb5SVNvXo8w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Performance Comparison**"
      ],
      "metadata": {
        "id": "ZZBi34SAW_ER"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [10, 8]\n",
        "\n",
        "ax = plt.GridSpec(3, 2)\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "# ax.update(wspace=0.4, hspace=0.3)\n",
        "\n",
        "barWidth = 0.1\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "\n",
        "\n",
        "rf=[0.9855, 0.9856, 0.9711, 0.9711]\n",
        "etc=[0.8987, 0.8928, 0.7973,\t0.8021]\n",
        "knn=[0.9580, 0.9597,\t0.9160,\t0.9192]\n",
        "cat=[0.9893, 0.9894,\t0.9787,\t0.9787]\n",
        "adb=[0.9195, 0.9192,\t0.8391,\t0.8391]\n",
        "xgb=[0.9907, 0.9907,\t0.9813,\t0.9814]\n",
        "lgb=[0.9880, 0.9881,\t0.9760,\t0.9761]\n",
        "stack=[0.9958, 0.9958,\t0.9915,\t0.9916]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('A', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "\n",
        "rf=[0.9767, 0.9765,\t0.9533,\t0.9534]\n",
        "etc=[0.8671, 0.8520,\t0.7342,\t0.7501]\n",
        "knn=[0.9478, 0.9503,\t0.8955,\t0.9002]\n",
        "cat=[0.9855, 0.9857,\t0.9711,\t0.9712]\n",
        "adb=[0.9471, 0.9473,\t0.8942,\t0.8942]\n",
        "xgb=[0.9858, 0.9859,\t0.9715,\t0.9716]\n",
        "lgb=[0.9880, 0.9880,\t0.9760,\t0.9760]\n",
        "stack=[0.9904, 0.9904,\t0.9809,\t0.9809]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('B', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[1,0])\n",
        "\n",
        "rf=[0.9773, 0.9774,\t0.9547,\t0.9547]\n",
        "etc=[0.8920, 0.8874,\t0.7840,\t0.7866]\n",
        "knn=[0.9373, 0.9410,\t0.8747,\t0.8816]\n",
        "cat=[0.9878, 0.9879,\t0.9755,\t0.9757]\n",
        "adb=[0.9287, 0.9296,\t0.8573,\t0.8576]\n",
        "xgb=[0.9911, 0.9912,\t0.9822,\t0.9823]\n",
        "lgb=[0.9902, 0.9903,\t0.9804,\t0.9805]\n",
        "stack=[0.9933, 0.9933,\t0.9867,\t0.9867]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.legend(title='Classifier',title_fontsize=13, ncol=2,bbox_to_anchor=(1,-0.35), fontsize=11, frameon=False)\n",
        "plt.title('C', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[1,1])\n",
        "\n",
        "rf=[0.9893, 0.9892,\t0.9787,\t0.9789]\n",
        "etc=[0.9782, 0.9777,\t0.9564,\t0.9573]\n",
        "knn=[0.9989, 0.9989,\t0.9978,\t0.9978]\n",
        "cat=[0.9969, 0.9969,\t0.9938,\t0.9938]\n",
        "adb=[0.9849, 0.9849,\t0.9698,\t0.9698]\n",
        "xgb=[0.9971, 0.9971,\t0.9942,\t0.9942]\n",
        "lgb=[0.9975, 0.9975,\t0.9951,\t0.9951]\n",
        "stack=[0.9995, 0.9995,\t0.9991,\t0.9991]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('D', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[2,0])\n",
        "\n",
        "rf=[0.9855, 0.9853,\t0.9711,\t0.9715]\n",
        "etc=[0.8190, 0.7790,\t0.6381,\t0.6845]\n",
        "knn=[0.8413, 0.8630,\t0.6825,\t0.7198]\n",
        "cat=[0.9918, 0.9918,\t0.9835,\t0.9835]\n",
        "adb=[0.9604, 0.9610,\t0.9208,\t0.9213]\n",
        "xgb=[0.9962, 0.9962,\t0.9924,\t0.9924]\n",
        "lgb=[0.9969, 0.9969,\t0.9938,\t0.9938]\n",
        "stack=[0.9987, 0.9987,\t0.9973,\t0.9973]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black', label='RF')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black', label='ETC')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black', label='KNN')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black', label='CAT')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black', label='ADB')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black', label='XGB')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black', label='LGBM')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black', label='StackAMP')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('E', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "plt.legend(title='Classifier',title_fontsize=13, ncol=2,bbox_to_anchor=(2.08, 0.85), fontsize=11, frameon=False)\n",
        "\n",
        "\n",
        "# # plt.tight_layout()\n",
        "plt.savefig('Perfromance Comparision of all the classifiers.png', dpi=800)\n",
        "plt.savefig('Perfromance Comparision of all the classifiers.pdf', dpi=800)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 694
        },
        "id": "9Xm_EPmULcFF",
        "outputId": "371c0edb-8837-46bb-d9c6-80bbdb2410a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [10, 8]\n",
        "\n",
        "ax = plt.GridSpec(3, 2)\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "# ax.update(wspace=0.4, hspace=0.3)\n",
        "\n",
        "barWidth = 0.1\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "\n",
        "\n",
        "rf=[0.9644, 0.7659,\t0.7474,\t0.7639]\n",
        "etc=[0.9385, 0.4865,\t0.4628,\t0.5487]\n",
        "knn=[0.9563, 0.7033,\t0.6811,\t0.7030]\n",
        "cat=[0.9676, 0.7826,\t0.7660,\t0.7879]\n",
        "adb=[0.9514, 0.7059,\t0.6797,\t0.6836]\n",
        "xgb=[0.9676, 0.7917,\t0.7746,\t0.7875]\n",
        "lgb=[0.9676, 0.7917,\t0.7746,\t0.7875]\n",
        "stack=[0.9709, 0.8085,\t0.7934,\t0.8109]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('A', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "\n",
        "rf=[0.9612, 0.7391,\t0.7192,\t0.7397]\n",
        "etc=[0.9579, 0.6977,\t0.6773,\t0.7156]\n",
        "knn=[0.9563, 0.7158,\t0.6929,\t0.7063]\n",
        "cat=[0.9644, 0.7659,\t0.7474,\t0.7639]\n",
        "adb=[0.9644, 0.7843,\t0.7651,\t0.7695]\n",
        "xgb=[0.9644, 0.7555,\t0.7376,\t0.7644]\n",
        "lgb=[0.9612, 0.7500,\t0.7296,\t0.7417]\n",
        "stack=[0.9547, 0.6667,\t0.6452,\t0.6901]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('B', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[1,0])\n",
        "\n",
        "rf=[0.9628, 0.7579,\t0.7384,\t0.7526]\n",
        "etc=[0.9223, 0.2500,\t0.2326,\t0.3628]\n",
        "knn=[0.9336, 0.5393,\t0.5061,\t0.5267]\n",
        "cat=[0.9660, 0.7742,\t0.7566,\t0.7757]\n",
        "adb=[0.9531, 0.7010,\t0.6762,\t0.6859]\n",
        "xgb=[0.9692, 0.8081,\t0.7917,\t0.7998]\n",
        "lgb=[0.9644, 0.7659,\t0.7474,\t0.7639]\n",
        "stack=[0.9272, 0.7191,\t0.6989,\t0.7273]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.legend(title='Classifier',title_fontsize=13, ncol=2,bbox_to_anchor=(1,-0.35), fontsize=11, frameon=False)\n",
        "plt.title('C', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[1,1])\n",
        "\n",
        "rf=[0.9272, 0.2857,\t0.2674,\t0.3929]\n",
        "etc=[0.9126, 0.0000,\t0.0000,\t0.0000]\n",
        "knn=[0.9223, 0.2000,\t0.1858,\t0.3200]\n",
        "cat=[0.9126, 0.0000,\t0.0000,\t0.0000]\n",
        "adb=[0.9498, 0.6869,\t0.6598,\t0.6631]\n",
        "xgb=[0.9126, 0.0000,\t0.0000,\t0.0000]\n",
        "lgb=[0.9126, 0.0000,\t0.0000,\t0.0000]\n",
        "stack=[0.9126, 0.0000,\t0.0000,\t0.0000]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('D', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[2,0])\n",
        "\n",
        "rf=[0.9578, 0.6286,\t0.6094,\t0.6620]\n",
        "etc=[0.9562, 0.6087,\t0.5892,\t0.6462]\n",
        "knn=[0.9318, 0.2759,\t0.2559,\t0.3460]\n",
        "cat=[0.9545, 0.5882,\t0.5684,\t0.6301]\n",
        "adb=[0.9545, 0.6585,\t0.6349,\t0.6458]\n",
        "xgb=[0.9659, 0.7200,\t0.7033,\t0.7365]\n",
        "lgb=[0.9627, 0.6849,\t0.6672,\t0.7075]\n",
        "stack=[0.9659, 0.7200,\t0.7033,\t0.7365]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(rf))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "br6 = [x + barWidth for x in br5]\n",
        "br7 = [x + barWidth for x in br6]\n",
        "br8 = [x + barWidth for x in br7]\n",
        "\n",
        "plt.bar(br1, rf,  width = barWidth, edgecolor ='black', label='RF')\n",
        "plt.bar(br2, etc,  width = barWidth, edgecolor ='black', label='ETC')\n",
        "plt.bar(br3, knn,  width = barWidth, edgecolor ='black', label='KNN')\n",
        "plt.bar(br4, cat,  width = barWidth, edgecolor ='black', label='CAT')\n",
        "plt.bar(br5, adb,  width = barWidth, edgecolor ='black', label='ADB')\n",
        "plt.bar(br6, xgb,  width = barWidth, edgecolor ='black', label='XGB')\n",
        "plt.bar(br7, lgb, width = barWidth, edgecolor ='black', label='LGBM')\n",
        "plt.bar(br8, stack, width = barWidth, edgecolor ='black', label='StackAMP')\n",
        "\n",
        "#plt.xlabel('Kappa-Stat', fontweight ='bold', fontsize = 11)\n",
        "plt.xticks([r + barWidth*3 for r in range(len(rf))], ['Accurcy', 'F1', 'Kappa', 'MCC'], fontweight ='bold')\n",
        "plt.ylabel('Score', fontweight ='bold', fontsize = 11)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('E', weight='bold',  fontsize=18, y = 0.85, x=-0.13)\n",
        "plt.legend(title='Classifier',title_fontsize=13, ncol=2,bbox_to_anchor=(2.08, 0.85), fontsize=11, frameon=False)\n",
        "\n",
        "\n",
        "# # plt.tight_layout()\n",
        "plt.savefig('Perfromance Comparision of all the classifiers (Ind).png', dpi=800)\n",
        "plt.savefig('Perfromance Comparision of all the classifiers (Ind).pdf', dpi=800)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        },
        "id": "Kg81VRIek9Xs",
        "outputId": "7d59d621-130f-46ed-8208-3029e92d26bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [12, 5]\n",
        "\n",
        "ax = plt.GridSpec(2, 2)\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "ax.update(wspace=0.25, hspace=0.3)\n",
        "barWidth = 0.17\n",
        "\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "\n",
        "aac=[0.9855,0.8987,0.9580,0.9893,0.9195,0.9907,0.9880,0.9958]\n",
        "ctdc=[0.9767,0.8671,0.9478,0.9855,0.9471,0.9858,0.9880,0.9904]\n",
        "gdpc=[0.9773,0.8920,0.9373,0.9878,0.9287,0.9911,0.9902,0.9933]\n",
        "lsa=[0.9893,0.9782,0.9989,0.9969,0.9849,0.9971,0.9975,0.9995]\n",
        "ftx=[0.9855,0.8190,0.8413,0.9918,0.9604,0.9962,0.9969,0.9987]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(aac))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "\n",
        "plt.bar(br1, aac,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br2, ctdc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br3, gdpc,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br4, lsa,  width = barWidth, edgecolor ='black')\n",
        "plt.bar(br5, ftx,  width = barWidth, edgecolor ='black')\n",
        "\n",
        "plt.xticks([r + barWidth*2 for r in range(len(aac))], ['RF', 'ETC', 'KNN', 'CAT', 'ADB', 'XGB', 'LGBM', 'StackAMP'], rotation=270, fontweight ='bold')\n",
        "plt.ylabel('Accuracy', fontweight ='bold', fontsize = 13)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('A', weight='bold',  fontsize=18, y = 0.87, x=-0.13)\n",
        "\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "\n",
        "aac=[0.9644,0.9385,0.9563,0.9676,0.9514,0.9676,0.9676,0.9709]\n",
        "ctdc=[0.9612,0.9579,0.9563,0.9644,0.9644,0.9644,0.9612,0.9547]\n",
        "gdpc=[0.9628,0.9223,0.9336,0.9660,0.9531,0.9692,0.9644,0.9595]\n",
        "lsa=[0.9272,0.9126,0.9223,0.9126,0.9498,0.9126,0.9126,0.9126]\n",
        "ftx=[0.9578,0.9562,0.9318,0.9545,0.9545,0.9659,0.9627,0.9659]\n",
        "\n",
        "\n",
        "br1 = np.arange(len(aac))\n",
        "br2 = [x + barWidth for x in br1]\n",
        "br3 = [x + barWidth for x in br2]\n",
        "br4 = [x + barWidth for x in br3]\n",
        "br5 = [x + barWidth for x in br4]\n",
        "\n",
        "plt.bar(br1, aac,  width = barWidth, edgecolor ='black', label='AAC')\n",
        "plt.bar(br2, ctdc,  width = barWidth, edgecolor ='black', label='CTDC')\n",
        "plt.bar(br3, gdpc,  width = barWidth, edgecolor ='black', label='GDPC')\n",
        "plt.bar(br4, lsa,  width = barWidth, edgecolor ='black', label='LSA')\n",
        "plt.bar(br5, ftx,  width = barWidth, edgecolor ='black', label='FastText')\n",
        "\n",
        "plt.xticks([r + barWidth*2 for r in range(len(aac))], ['RF', 'ETC', 'KNN', 'CAT', 'ADB', 'XGB', 'LGBM', 'StackAMP'], rotation=270, fontweight ='bold')\n",
        "plt.ylabel('Accuracy', fontweight ='bold', fontsize = 13)\n",
        "plt.yticks(fontweight = 'bold', fontsize = 10)\n",
        "plt.title('B', weight='bold',  fontsize=18, y = 0.87, x=-0.13)\n",
        "plt.legend(title='Feature Extractor',title_fontsize=13,ncol=3,bbox_to_anchor=(0.37,-0.5), fontsize=11, frameon=False)\n",
        "\n",
        "plt.savefig('Perfromance Comparision of all the extractor.png', dpi=800)\n",
        "plt.savefig('Perfromance Comparision of all the extractor.pdf', dpi=800)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "id": "lJ_KDVImVwfR",
        "outputId": "22977b18-59d4-4586-aeea-a5fd03ebb852"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **ROC Curve**"
      ],
      "metadata": {
        "id": "gaP3Rwd3XZXU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_tr = pd.read_csv('/content/AAC-Tr.csv')\n",
        "columns = df_tr.columns.tolist()\n",
        "# Filter the columns to remove data we do not want\n",
        "columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# Store the variable we are predicting\n",
        "target = \"Target\"\n",
        "xtrain = df_tr[columns]\n",
        "ytrain = df_tr[target]"
      ],
      "metadata": {
        "id": "kySTUNI4XcmT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain1, xtest1, ytrain1, ytest1 = train_test_split(xtrain, ytrain, test_size= 0.2, random_state=42)"
      ],
      "metadata": {
        "id": "Q6gFGSVHhxyk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.combine import SMOTETomek\n",
        "smt = SMOTETomek()\n",
        "xtrain_res, ytrain_res = smt.fit_resample(xtrain, ytrain)"
      ],
      "metadata": {
        "id": "6J0mG_YScdM6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_ts = pd.read_csv('/content/Res_AAC-Ind.csv')\n",
        "columns = df_ts.columns.tolist()\n",
        "# Filter the columns to remove data we do not want\n",
        "columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# Store the variable we are predicting\n",
        "target = \"Target\"\n",
        "xtest = df_ts[columns]\n",
        "ytest = df_ts[target]"
      ],
      "metadata": {
        "id": "K8JPNBaHYJZ6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv = KFold(n_splits=5, random_state=1, shuffle=True)"
      ],
      "metadata": {
        "id": "LjYzbxCZYTh7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for train_i, test_i in cv.split(xtrain_res):\n",
        "    X_train1, X_test1 = xtrain_res.iloc[train_i], xtrain_res.iloc[test_i]\n",
        "    y_train1, y_test1 = ytrain_res.iloc[train_i], ytrain_res.iloc[test_i]"
      ],
      "metadata": {
        "id": "5lJGBMCNYZXR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf = RandomForestClassifier(n_estimators = 450, max_depth = 9)\n",
        "etc = ExtraTreesClassifier(n_estimators = 450, max_depth = 7)\n",
        "knn = KNeighborsClassifier(n_neighbors=5)\n",
        "cat = CatBoostClassifier(depth= 7, iterations = 45, learning_rate = 0.35)\n",
        "adb = AdaBoostClassifier(n_estimators = 350, learning_rate = 0.5, random_state = 50)\n",
        "xgb = XGBClassifier(n_estimators = 350,max_depth = 7, base_score = 0.5, learning_rate = 0.1)\n",
        "lgb = LGBMClassifier(learning_rate = 0.1,max_depth = 7,random_state = 50)"
      ],
      "metadata": {
        "id": "4KhEonc9YkgK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [10, 3.5]\n",
        "#plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "ax = plt.GridSpec(1, 2)\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "plt.title('A', weight='bold',  fontsize=18, y = 0.90, x=-0.11)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "rf.fit(X_train1, y_train1)\n",
        "xgb.fit(X_train1, y_train1)\n",
        "cat.fit(X_train1, y_train1)\n",
        "lgb.fit(X_train1, y_train1)\n",
        "knn.fit(X_train1, y_train1)\n",
        "etc.fit(X_train1, y_train1)\n",
        "adb.fit(X_train1, y_train1)\n",
        "Stacking.fit(X_train1, y_train1)\n",
        "\n",
        "pred = rf.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"RF, AUC=\"+str(auc))\n",
        "\n",
        "pred = etc.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"ETC, AUC=\"+str(auc))\n",
        "\n",
        "pred = cat.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#008000\", label=\"CAT, AUC=\"+str(auc))\n",
        "\n",
        "pred = xgb.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"XGB, AUC=\"+str(auc))\n",
        "\n",
        "pred = lgb.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#00FFFF\", label=\"LGBM, AUC=\"+str(auc))\n",
        "\n",
        "pred = knn.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#808000\", label=\"KNN, AUC=\"+str(auc))\n",
        "\n",
        "pred = adb.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#31a354\", label=\"ADB, AUC=\"+str(auc))\n",
        "\n",
        "pred = Stacking.predict_proba(X_test1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(y_test1, pred)\n",
        "auc = round(metrics.roc_auc_score(y_test1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#00008B\", label=\"StackAMP, AUC=\"+str(auc))\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "plt.title('B', weight='bold',  fontsize=18, y = 0.90, x=-0.11)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "rf.fit(xtrain1, ytrain1)\n",
        "xgb.fit(xtrain1, ytrain1)\n",
        "cat.fit(xtrain1, ytrain1)\n",
        "lgb.fit(xtrain1, ytrain1)\n",
        "knn.fit(xtrain1, ytrain1)\n",
        "etc.fit(xtrain1, ytrain1)\n",
        "adb.fit(xtrain1, ytrain1)\n",
        "Stacking.fit(xtrain1, ytrain1)\n",
        "\n",
        "pred = rf.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"RF, AUC=\"+str(auc))\n",
        "\n",
        "pred = etc.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"ETC, AUC=\"+str(auc))\n",
        "\n",
        "pred = Stacking.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#008000\", label=\"CAT, AUC=\"+str(auc))\n",
        "\n",
        "pred = xgb.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"XGB, AUC=\"+str(auc))\n",
        "\n",
        "pred = lgb.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#00FFFF\", label=\"LGBM, AUC=\"+str(auc))\n",
        "\n",
        "pred = knn.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#808000\", label=\"KNN, AUC=\"+str(auc))\n",
        "\n",
        "pred = adb.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#31a354\", label=\"ADB, AUC=\"+str(auc))\n",
        "\n",
        "pred = cat.predict_proba(xtest1)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest1, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest1, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#00008B\", label=\"StackAMP, AUC=\"+str(auc))\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('ROC Curve.png', dpi=800)\n",
        "plt.savefig('ROC Curve.pdf', dpi=800)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3kGOBdSkZBwS",
        "outputId": "d9f5afa6-bd81-4ff4-fb28-21cf544bff13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 0.4319711\ttotal: 7.05ms\tremaining: 310ms\n",
            "1:\tlearn: 0.3040643\ttotal: 14ms\tremaining: 302ms\n",
            "2:\tlearn: 0.2406981\ttotal: 23.2ms\tremaining: 325ms\n",
            "3:\tlearn: 0.1973828\ttotal: 32.2ms\tremaining: 330ms\n",
            "4:\tlearn: 0.1688648\ttotal: 39.4ms\tremaining: 315ms\n",
            "5:\tlearn: 0.1427710\ttotal: 46.8ms\tremaining: 304ms\n",
            "6:\tlearn: 0.1224438\ttotal: 53.4ms\tremaining: 290ms\n",
            "7:\tlearn: 0.1078723\ttotal: 61.3ms\tremaining: 283ms\n",
            "8:\tlearn: 0.0974690\ttotal: 68.1ms\tremaining: 273ms\n",
            "9:\tlearn: 0.0835437\ttotal: 76.2ms\tremaining: 267ms\n",
            "10:\tlearn: 0.0752989\ttotal: 82.9ms\tremaining: 256ms\n",
            "11:\tlearn: 0.0715118\ttotal: 92ms\tremaining: 253ms\n",
            "12:\tlearn: 0.0662966\ttotal: 99.8ms\tremaining: 246ms\n",
            "13:\tlearn: 0.0629886\ttotal: 107ms\tremaining: 236ms\n",
            "14:\tlearn: 0.0586847\ttotal: 115ms\tremaining: 230ms\n",
            "15:\tlearn: 0.0496051\ttotal: 127ms\tremaining: 230ms\n",
            "16:\tlearn: 0.0459633\ttotal: 138ms\tremaining: 227ms\n",
            "17:\tlearn: 0.0424532\ttotal: 147ms\tremaining: 220ms\n",
            "18:\tlearn: 0.0399929\ttotal: 154ms\tremaining: 211ms\n",
            "19:\tlearn: 0.0369814\ttotal: 163ms\tremaining: 204ms\n",
            "20:\tlearn: 0.0338016\ttotal: 170ms\tremaining: 194ms\n",
            "21:\tlearn: 0.0307818\ttotal: 176ms\tremaining: 184ms\n",
            "22:\tlearn: 0.0302699\ttotal: 183ms\tremaining: 175ms\n",
            "23:\tlearn: 0.0281308\ttotal: 189ms\tremaining: 166ms\n",
            "24:\tlearn: 0.0268806\ttotal: 196ms\tremaining: 157ms\n",
            "25:\tlearn: 0.0254145\ttotal: 207ms\tremaining: 151ms\n",
            "26:\tlearn: 0.0233877\ttotal: 214ms\tremaining: 143ms\n",
            "27:\tlearn: 0.0225418\ttotal: 221ms\tremaining: 134ms\n",
            "28:\tlearn: 0.0213864\ttotal: 227ms\tremaining: 125ms\n",
            "29:\tlearn: 0.0197706\ttotal: 233ms\tremaining: 117ms\n",
            "30:\tlearn: 0.0188710\ttotal: 240ms\tremaining: 108ms\n",
            "31:\tlearn: 0.0179945\ttotal: 247ms\tremaining: 100ms\n",
            "32:\tlearn: 0.0175391\ttotal: 253ms\tremaining: 92.1ms\n",
            "33:\tlearn: 0.0165781\ttotal: 260ms\tremaining: 84.2ms\n",
            "34:\tlearn: 0.0159189\ttotal: 267ms\tremaining: 76.3ms\n",
            "35:\tlearn: 0.0155277\ttotal: 274ms\tremaining: 68.4ms\n",
            "36:\tlearn: 0.0146275\ttotal: 280ms\tremaining: 60.6ms\n",
            "37:\tlearn: 0.0142817\ttotal: 287ms\tremaining: 52.9ms\n",
            "38:\tlearn: 0.0134932\ttotal: 294ms\tremaining: 45.2ms\n",
            "39:\tlearn: 0.0133266\ttotal: 300ms\tremaining: 37.5ms\n",
            "40:\tlearn: 0.0124677\ttotal: 306ms\tremaining: 29.9ms\n",
            "41:\tlearn: 0.0116954\ttotal: 313ms\tremaining: 22.4ms\n",
            "42:\tlearn: 0.0111178\ttotal: 320ms\tremaining: 14.9ms\n",
            "43:\tlearn: 0.0106503\ttotal: 328ms\tremaining: 7.45ms\n",
            "44:\tlearn: 0.0100690\ttotal: 335ms\tremaining: 0us\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 1793, number of negative: 1807\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000504 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5069\n",
            "[LightGBM] [Info] Number of data points in the train set: 3600, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.498056 -> initscore=-0.007778\n",
            "[LightGBM] [Info] Start training from score -0.007778\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "0:\tlearn: 0.4319711\ttotal: 6.95ms\tremaining: 306ms\n",
            "1:\tlearn: 0.3040643\ttotal: 14.1ms\tremaining: 302ms\n",
            "2:\tlearn: 0.2406981\ttotal: 20.9ms\tremaining: 293ms\n",
            "3:\tlearn: 0.1973828\ttotal: 27.8ms\tremaining: 285ms\n",
            "4:\tlearn: 0.1688648\ttotal: 36.5ms\tremaining: 292ms\n",
            "5:\tlearn: 0.1427710\ttotal: 44.1ms\tremaining: 287ms\n",
            "6:\tlearn: 0.1224438\ttotal: 51.9ms\tremaining: 282ms\n",
            "7:\tlearn: 0.1078723\ttotal: 59.2ms\tremaining: 274ms\n",
            "8:\tlearn: 0.0974690\ttotal: 65.7ms\tremaining: 263ms\n",
            "9:\tlearn: 0.0835437\ttotal: 72.5ms\tremaining: 254ms\n",
            "10:\tlearn: 0.0752989\ttotal: 79.1ms\tremaining: 245ms\n",
            "11:\tlearn: 0.0715118\ttotal: 85.8ms\tremaining: 236ms\n",
            "12:\tlearn: 0.0662966\ttotal: 92.8ms\tremaining: 228ms\n",
            "13:\tlearn: 0.0629886\ttotal: 99.7ms\tremaining: 221ms\n",
            "14:\tlearn: 0.0586847\ttotal: 106ms\tremaining: 213ms\n",
            "15:\tlearn: 0.0496051\ttotal: 113ms\tremaining: 205ms\n",
            "16:\tlearn: 0.0459633\ttotal: 120ms\tremaining: 197ms\n",
            "17:\tlearn: 0.0424532\ttotal: 126ms\tremaining: 189ms\n",
            "18:\tlearn: 0.0399929\ttotal: 132ms\tremaining: 181ms\n",
            "19:\tlearn: 0.0369814\ttotal: 141ms\tremaining: 176ms\n",
            "20:\tlearn: 0.0338016\ttotal: 155ms\tremaining: 177ms\n",
            "21:\tlearn: 0.0307818\ttotal: 162ms\tremaining: 169ms\n",
            "22:\tlearn: 0.0302699\ttotal: 168ms\tremaining: 161ms\n",
            "23:\tlearn: 0.0281308\ttotal: 175ms\tremaining: 153ms\n",
            "24:\tlearn: 0.0268806\ttotal: 181ms\tremaining: 145ms\n",
            "25:\tlearn: 0.0254145\ttotal: 188ms\tremaining: 138ms\n",
            "26:\tlearn: 0.0233877\ttotal: 195ms\tremaining: 130ms\n",
            "27:\tlearn: 0.0225418\ttotal: 202ms\tremaining: 123ms\n",
            "28:\tlearn: 0.0213864\ttotal: 213ms\tremaining: 118ms\n",
            "29:\tlearn: 0.0197706\ttotal: 220ms\tremaining: 110ms\n",
            "30:\tlearn: 0.0188710\ttotal: 227ms\tremaining: 103ms\n",
            "31:\tlearn: 0.0179945\ttotal: 234ms\tremaining: 95.1ms\n",
            "32:\tlearn: 0.0175391\ttotal: 241ms\tremaining: 87.6ms\n",
            "33:\tlearn: 0.0165781\ttotal: 248ms\tremaining: 80.2ms\n",
            "34:\tlearn: 0.0159189\ttotal: 255ms\tremaining: 72.8ms\n",
            "35:\tlearn: 0.0155277\ttotal: 262ms\tremaining: 65.6ms\n",
            "36:\tlearn: 0.0146275\ttotal: 269ms\tremaining: 58.2ms\n",
            "37:\tlearn: 0.0142817\ttotal: 276ms\tremaining: 50.8ms\n",
            "38:\tlearn: 0.0134932\ttotal: 282ms\tremaining: 43.4ms\n",
            "39:\tlearn: 0.0133266\ttotal: 289ms\tremaining: 36.1ms\n",
            "40:\tlearn: 0.0124677\ttotal: 295ms\tremaining: 28.8ms\n",
            "41:\tlearn: 0.0116954\ttotal: 302ms\tremaining: 21.6ms\n",
            "42:\tlearn: 0.0111178\ttotal: 308ms\tremaining: 14.3ms\n",
            "43:\tlearn: 0.0106503\ttotal: 315ms\tremaining: 7.16ms\n",
            "44:\tlearn: 0.0100690\ttotal: 322ms\tremaining: 0us\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 1793, number of negative: 1807\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000473 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5069\n",
            "[LightGBM] [Info] Number of data points in the train set: 3600, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.498056 -> initscore=-0.007778\n",
            "[LightGBM] [Info] Start training from score -0.007778\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "0:\tlearn: 0.4381790\ttotal: 8.41ms\tremaining: 370ms\n",
            "1:\tlearn: 0.3204992\ttotal: 15.9ms\tremaining: 341ms\n",
            "2:\tlearn: 0.2553306\ttotal: 22.2ms\tremaining: 310ms\n",
            "3:\tlearn: 0.2072177\ttotal: 28.9ms\tremaining: 296ms\n",
            "4:\tlearn: 0.1769152\ttotal: 35.6ms\tremaining: 285ms\n",
            "5:\tlearn: 0.1476879\ttotal: 42ms\tremaining: 273ms\n",
            "6:\tlearn: 0.1372210\ttotal: 49ms\tremaining: 266ms\n",
            "7:\tlearn: 0.1234221\ttotal: 55.3ms\tremaining: 256ms\n",
            "8:\tlearn: 0.1123432\ttotal: 62.7ms\tremaining: 251ms\n",
            "9:\tlearn: 0.1029749\ttotal: 70.5ms\tremaining: 247ms\n",
            "10:\tlearn: 0.0919039\ttotal: 77.1ms\tremaining: 238ms\n",
            "11:\tlearn: 0.0873648\ttotal: 83.8ms\tremaining: 231ms\n",
            "12:\tlearn: 0.0747535\ttotal: 93.9ms\tremaining: 231ms\n",
            "13:\tlearn: 0.0653255\ttotal: 101ms\tremaining: 224ms\n",
            "14:\tlearn: 0.0601978\ttotal: 109ms\tremaining: 219ms\n",
            "15:\tlearn: 0.0551445\ttotal: 116ms\tremaining: 210ms\n",
            "16:\tlearn: 0.0492206\ttotal: 123ms\tremaining: 202ms\n",
            "17:\tlearn: 0.0442764\ttotal: 129ms\tremaining: 194ms\n",
            "18:\tlearn: 0.0407226\ttotal: 136ms\tremaining: 186ms\n",
            "19:\tlearn: 0.0361375\ttotal: 142ms\tremaining: 178ms\n",
            "20:\tlearn: 0.0339931\ttotal: 149ms\tremaining: 170ms\n",
            "21:\tlearn: 0.0316015\ttotal: 156ms\tremaining: 163ms\n",
            "22:\tlearn: 0.0310639\ttotal: 162ms\tremaining: 155ms\n",
            "23:\tlearn: 0.0289128\ttotal: 168ms\tremaining: 147ms\n",
            "24:\tlearn: 0.0277332\ttotal: 175ms\tremaining: 140ms\n",
            "25:\tlearn: 0.0258592\ttotal: 182ms\tremaining: 133ms\n",
            "26:\tlearn: 0.0256896\ttotal: 189ms\tremaining: 126ms\n",
            "27:\tlearn: 0.0244654\ttotal: 196ms\tremaining: 119ms\n",
            "28:\tlearn: 0.0241868\ttotal: 202ms\tremaining: 111ms\n",
            "29:\tlearn: 0.0225042\ttotal: 213ms\tremaining: 106ms\n",
            "30:\tlearn: 0.0209506\ttotal: 222ms\tremaining: 100ms\n",
            "31:\tlearn: 0.0199243\ttotal: 235ms\tremaining: 95.6ms\n",
            "32:\tlearn: 0.0180147\ttotal: 245ms\tremaining: 89.3ms\n",
            "33:\tlearn: 0.0166024\ttotal: 252ms\tremaining: 81.6ms\n",
            "34:\tlearn: 0.0160609\ttotal: 259ms\tremaining: 74.1ms\n",
            "35:\tlearn: 0.0148165\ttotal: 267ms\tremaining: 66.9ms\n",
            "36:\tlearn: 0.0147251\ttotal: 274ms\tremaining: 59.3ms\n",
            "37:\tlearn: 0.0146773\ttotal: 281ms\tremaining: 51.7ms\n",
            "38:\tlearn: 0.0146772\ttotal: 288ms\tremaining: 44.3ms\n",
            "39:\tlearn: 0.0146393\ttotal: 304ms\tremaining: 38ms\n",
            "40:\tlearn: 0.0132438\ttotal: 317ms\tremaining: 30.9ms\n",
            "41:\tlearn: 0.0128550\ttotal: 330ms\tremaining: 23.5ms\n",
            "42:\tlearn: 0.0123803\ttotal: 345ms\tremaining: 16ms\n",
            "43:\tlearn: 0.0122247\ttotal: 359ms\tremaining: 8.17ms\n",
            "44:\tlearn: 0.0121600\ttotal: 373ms\tremaining: 0us\n",
            "0:\tlearn: 0.4375047\ttotal: 14.5ms\tremaining: 637ms\n",
            "1:\tlearn: 0.3122405\ttotal: 28.5ms\tremaining: 613ms\n",
            "2:\tlearn: 0.2370720\ttotal: 42.8ms\tremaining: 599ms\n",
            "3:\tlearn: 0.2004045\ttotal: 56.6ms\tremaining: 580ms\n",
            "4:\tlearn: 0.1680367\ttotal: 72ms\tremaining: 576ms\n",
            "5:\tlearn: 0.1416899\ttotal: 83.4ms\tremaining: 542ms\n",
            "6:\tlearn: 0.1263684\ttotal: 92.8ms\tremaining: 504ms\n",
            "7:\tlearn: 0.1106560\ttotal: 100ms\tremaining: 462ms\n",
            "8:\tlearn: 0.1016068\ttotal: 108ms\tremaining: 433ms\n",
            "9:\tlearn: 0.0965567\ttotal: 116ms\tremaining: 405ms\n",
            "10:\tlearn: 0.0886076\ttotal: 123ms\tremaining: 381ms\n",
            "11:\tlearn: 0.0850008\ttotal: 130ms\tremaining: 358ms\n",
            "12:\tlearn: 0.0737349\ttotal: 138ms\tremaining: 340ms\n",
            "13:\tlearn: 0.0694382\ttotal: 147ms\tremaining: 326ms\n",
            "14:\tlearn: 0.0637059\ttotal: 155ms\tremaining: 309ms\n",
            "15:\tlearn: 0.0569607\ttotal: 166ms\tremaining: 300ms\n",
            "16:\tlearn: 0.0516435\ttotal: 177ms\tremaining: 291ms\n",
            "17:\tlearn: 0.0475318\ttotal: 196ms\tremaining: 293ms\n",
            "18:\tlearn: 0.0444823\ttotal: 210ms\tremaining: 288ms\n",
            "19:\tlearn: 0.0412953\ttotal: 220ms\tremaining: 274ms\n",
            "20:\tlearn: 0.0390336\ttotal: 229ms\tremaining: 262ms\n",
            "21:\tlearn: 0.0347068\ttotal: 241ms\tremaining: 252ms\n",
            "22:\tlearn: 0.0324573\ttotal: 253ms\tremaining: 242ms\n",
            "23:\tlearn: 0.0313057\ttotal: 277ms\tremaining: 243ms\n",
            "24:\tlearn: 0.0283033\ttotal: 296ms\tremaining: 237ms\n",
            "25:\tlearn: 0.0265526\ttotal: 317ms\tremaining: 231ms\n",
            "26:\tlearn: 0.0245911\ttotal: 327ms\tremaining: 218ms\n",
            "27:\tlearn: 0.0229861\ttotal: 340ms\tremaining: 206ms\n",
            "28:\tlearn: 0.0218520\ttotal: 353ms\tremaining: 195ms\n",
            "29:\tlearn: 0.0205424\ttotal: 365ms\tremaining: 183ms\n",
            "30:\tlearn: 0.0192087\ttotal: 378ms\tremaining: 171ms\n",
            "31:\tlearn: 0.0174658\ttotal: 388ms\tremaining: 158ms\n",
            "32:\tlearn: 0.0159920\ttotal: 405ms\tremaining: 147ms\n",
            "33:\tlearn: 0.0157303\ttotal: 417ms\tremaining: 135ms\n",
            "34:\tlearn: 0.0151423\ttotal: 432ms\tremaining: 123ms\n",
            "35:\tlearn: 0.0139179\ttotal: 444ms\tremaining: 111ms\n",
            "36:\tlearn: 0.0131148\ttotal: 458ms\tremaining: 99ms\n",
            "37:\tlearn: 0.0127016\ttotal: 470ms\tremaining: 86.7ms\n",
            "38:\tlearn: 0.0123927\ttotal: 483ms\tremaining: 74.3ms\n",
            "39:\tlearn: 0.0122581\ttotal: 497ms\tremaining: 62.1ms\n",
            "40:\tlearn: 0.0116223\ttotal: 515ms\tremaining: 50.3ms\n",
            "41:\tlearn: 0.0116218\ttotal: 529ms\tremaining: 37.8ms\n",
            "42:\tlearn: 0.0114245\ttotal: 541ms\tremaining: 25.2ms\n",
            "43:\tlearn: 0.0113468\ttotal: 557ms\tremaining: 12.7ms\n",
            "44:\tlearn: 0.0111454\ttotal: 577ms\tremaining: 0us\n",
            "0:\tlearn: 0.4624025\ttotal: 18.5ms\tremaining: 814ms\n",
            "1:\tlearn: 0.3422376\ttotal: 31.6ms\tremaining: 680ms\n",
            "2:\tlearn: 0.2717754\ttotal: 44.4ms\tremaining: 621ms\n",
            "3:\tlearn: 0.2170113\ttotal: 61.1ms\tremaining: 626ms\n",
            "4:\tlearn: 0.1752557\ttotal: 76.4ms\tremaining: 611ms\n",
            "5:\tlearn: 0.1447800\ttotal: 89.9ms\tremaining: 584ms\n",
            "6:\tlearn: 0.1255659\ttotal: 103ms\tremaining: 558ms\n",
            "7:\tlearn: 0.1127705\ttotal: 119ms\tremaining: 549ms\n",
            "8:\tlearn: 0.1045474\ttotal: 141ms\tremaining: 563ms\n",
            "9:\tlearn: 0.0903932\ttotal: 164ms\tremaining: 574ms\n",
            "10:\tlearn: 0.0837016\ttotal: 180ms\tremaining: 555ms\n",
            "11:\tlearn: 0.0772789\ttotal: 193ms\tremaining: 531ms\n",
            "12:\tlearn: 0.0727655\ttotal: 207ms\tremaining: 511ms\n",
            "13:\tlearn: 0.0661640\ttotal: 228ms\tremaining: 506ms\n",
            "14:\tlearn: 0.0603506\ttotal: 246ms\tremaining: 491ms\n",
            "15:\tlearn: 0.0544891\ttotal: 266ms\tremaining: 482ms\n",
            "16:\tlearn: 0.0501447\ttotal: 279ms\tremaining: 460ms\n",
            "17:\tlearn: 0.0462934\ttotal: 292ms\tremaining: 438ms\n",
            "18:\tlearn: 0.0439623\ttotal: 307ms\tremaining: 420ms\n",
            "19:\tlearn: 0.0407539\ttotal: 332ms\tremaining: 415ms\n",
            "20:\tlearn: 0.0391213\ttotal: 355ms\tremaining: 405ms\n",
            "21:\tlearn: 0.0363186\ttotal: 368ms\tremaining: 385ms\n",
            "22:\tlearn: 0.0347225\ttotal: 395ms\tremaining: 378ms\n",
            "23:\tlearn: 0.0331730\ttotal: 408ms\tremaining: 357ms\n",
            "24:\tlearn: 0.0299974\ttotal: 422ms\tremaining: 338ms\n",
            "25:\tlearn: 0.0272453\ttotal: 446ms\tremaining: 326ms\n",
            "26:\tlearn: 0.0268477\ttotal: 461ms\tremaining: 307ms\n",
            "27:\tlearn: 0.0252919\ttotal: 475ms\tremaining: 288ms\n",
            "28:\tlearn: 0.0233162\ttotal: 490ms\tremaining: 271ms\n",
            "29:\tlearn: 0.0212992\ttotal: 503ms\tremaining: 252ms\n",
            "30:\tlearn: 0.0207786\ttotal: 516ms\tremaining: 233ms\n",
            "31:\tlearn: 0.0205456\ttotal: 530ms\tremaining: 215ms\n",
            "32:\tlearn: 0.0190658\ttotal: 543ms\tremaining: 197ms\n",
            "33:\tlearn: 0.0183532\ttotal: 558ms\tremaining: 181ms\n",
            "34:\tlearn: 0.0172239\ttotal: 573ms\tremaining: 164ms\n",
            "35:\tlearn: 0.0165760\ttotal: 587ms\tremaining: 147ms\n",
            "36:\tlearn: 0.0153475\ttotal: 602ms\tremaining: 130ms\n",
            "37:\tlearn: 0.0145641\ttotal: 614ms\tremaining: 113ms\n",
            "38:\tlearn: 0.0142922\ttotal: 629ms\tremaining: 96.7ms\n",
            "39:\tlearn: 0.0137061\ttotal: 643ms\tremaining: 80.3ms\n",
            "40:\tlearn: 0.0130552\ttotal: 670ms\tremaining: 65.3ms\n",
            "41:\tlearn: 0.0124593\ttotal: 683ms\tremaining: 48.8ms\n",
            "42:\tlearn: 0.0120618\ttotal: 697ms\tremaining: 32.4ms\n",
            "43:\tlearn: 0.0117986\ttotal: 723ms\tremaining: 16.4ms\n",
            "44:\tlearn: 0.0116512\ttotal: 746ms\tremaining: 0us\n",
            "0:\tlearn: 0.4686724\ttotal: 21.3ms\tremaining: 935ms\n",
            "1:\tlearn: 0.3217854\ttotal: 39.4ms\tremaining: 847ms\n",
            "2:\tlearn: 0.2673579\ttotal: 52.3ms\tremaining: 732ms\n",
            "3:\tlearn: 0.2245554\ttotal: 67.1ms\tremaining: 688ms\n",
            "4:\tlearn: 0.1853430\ttotal: 81.2ms\tremaining: 649ms\n",
            "5:\tlearn: 0.1576205\ttotal: 93.4ms\tremaining: 607ms\n",
            "6:\tlearn: 0.1351848\ttotal: 119ms\tremaining: 648ms\n",
            "7:\tlearn: 0.1134413\ttotal: 132ms\tremaining: 611ms\n",
            "8:\tlearn: 0.0992572\ttotal: 161ms\tremaining: 646ms\n",
            "9:\tlearn: 0.0945049\ttotal: 181ms\tremaining: 633ms\n",
            "10:\tlearn: 0.0902005\ttotal: 204ms\tremaining: 629ms\n",
            "11:\tlearn: 0.0862244\ttotal: 219ms\tremaining: 602ms\n",
            "12:\tlearn: 0.0781322\ttotal: 238ms\tremaining: 587ms\n",
            "13:\tlearn: 0.0736892\ttotal: 253ms\tremaining: 560ms\n",
            "14:\tlearn: 0.0656609\ttotal: 269ms\tremaining: 539ms\n",
            "15:\tlearn: 0.0582271\ttotal: 300ms\tremaining: 543ms\n",
            "16:\tlearn: 0.0538978\ttotal: 321ms\tremaining: 529ms\n",
            "17:\tlearn: 0.0498554\ttotal: 337ms\tremaining: 506ms\n",
            "18:\tlearn: 0.0459721\ttotal: 351ms\tremaining: 480ms\n",
            "19:\tlearn: 0.0432586\ttotal: 368ms\tremaining: 460ms\n",
            "20:\tlearn: 0.0385681\ttotal: 388ms\tremaining: 443ms\n",
            "21:\tlearn: 0.0364722\ttotal: 402ms\tremaining: 420ms\n",
            "22:\tlearn: 0.0354246\ttotal: 417ms\tremaining: 399ms\n",
            "23:\tlearn: 0.0330693\ttotal: 435ms\tremaining: 380ms\n",
            "24:\tlearn: 0.0308428\ttotal: 448ms\tremaining: 358ms\n",
            "25:\tlearn: 0.0285624\ttotal: 460ms\tremaining: 336ms\n",
            "26:\tlearn: 0.0261280\ttotal: 485ms\tremaining: 323ms\n",
            "27:\tlearn: 0.0246911\ttotal: 504ms\tremaining: 306ms\n",
            "28:\tlearn: 0.0243371\ttotal: 524ms\tremaining: 289ms\n",
            "29:\tlearn: 0.0221856\ttotal: 552ms\tremaining: 276ms\n",
            "30:\tlearn: 0.0204341\ttotal: 573ms\tremaining: 259ms\n",
            "31:\tlearn: 0.0192532\ttotal: 589ms\tremaining: 239ms\n",
            "32:\tlearn: 0.0177594\ttotal: 603ms\tremaining: 219ms\n",
            "33:\tlearn: 0.0174725\ttotal: 617ms\tremaining: 200ms\n",
            "34:\tlearn: 0.0169046\ttotal: 632ms\tremaining: 181ms\n",
            "35:\tlearn: 0.0162758\ttotal: 645ms\tremaining: 161ms\n",
            "36:\tlearn: 0.0149538\ttotal: 663ms\tremaining: 143ms\n",
            "37:\tlearn: 0.0145226\ttotal: 682ms\tremaining: 126ms\n",
            "38:\tlearn: 0.0144715\ttotal: 698ms\tremaining: 107ms\n",
            "39:\tlearn: 0.0134841\ttotal: 712ms\tremaining: 89ms\n",
            "40:\tlearn: 0.0124322\ttotal: 724ms\tremaining: 70.6ms\n",
            "41:\tlearn: 0.0120080\ttotal: 738ms\tremaining: 52.7ms\n",
            "42:\tlearn: 0.0118149\ttotal: 751ms\tremaining: 34.9ms\n",
            "43:\tlearn: 0.0110106\ttotal: 765ms\tremaining: 17.4ms\n",
            "44:\tlearn: 0.0107831\ttotal: 788ms\tremaining: 0us\n",
            "0:\tlearn: 0.4755211\ttotal: 21.6ms\tremaining: 951ms\n",
            "1:\tlearn: 0.3305656\ttotal: 36ms\tremaining: 774ms\n",
            "2:\tlearn: 0.2497584\ttotal: 50.3ms\tremaining: 704ms\n",
            "3:\tlearn: 0.1984364\ttotal: 63.6ms\tremaining: 652ms\n",
            "4:\tlearn: 0.1809439\ttotal: 88.9ms\tremaining: 711ms\n",
            "5:\tlearn: 0.1535371\ttotal: 103ms\tremaining: 669ms\n",
            "6:\tlearn: 0.1335008\ttotal: 118ms\tremaining: 643ms\n",
            "7:\tlearn: 0.1175009\ttotal: 132ms\tremaining: 613ms\n",
            "8:\tlearn: 0.1044682\ttotal: 146ms\tremaining: 585ms\n",
            "9:\tlearn: 0.0951640\ttotal: 163ms\tremaining: 569ms\n",
            "10:\tlearn: 0.0884085\ttotal: 189ms\tremaining: 584ms\n",
            "11:\tlearn: 0.0799242\ttotal: 212ms\tremaining: 582ms\n",
            "12:\tlearn: 0.0757220\ttotal: 232ms\tremaining: 571ms\n",
            "13:\tlearn: 0.0717103\ttotal: 257ms\tremaining: 569ms\n",
            "14:\tlearn: 0.0648848\ttotal: 274ms\tremaining: 548ms\n",
            "15:\tlearn: 0.0593441\ttotal: 287ms\tremaining: 521ms\n",
            "16:\tlearn: 0.0528230\ttotal: 303ms\tremaining: 499ms\n",
            "17:\tlearn: 0.0482693\ttotal: 315ms\tremaining: 473ms\n",
            "18:\tlearn: 0.0458844\ttotal: 328ms\tremaining: 448ms\n",
            "19:\tlearn: 0.0427217\ttotal: 340ms\tremaining: 425ms\n",
            "20:\tlearn: 0.0419939\ttotal: 351ms\tremaining: 402ms\n",
            "21:\tlearn: 0.0391763\ttotal: 364ms\tremaining: 380ms\n",
            "22:\tlearn: 0.0362678\ttotal: 375ms\tremaining: 359ms\n",
            "23:\tlearn: 0.0336884\ttotal: 391ms\tremaining: 342ms\n",
            "24:\tlearn: 0.0321361\ttotal: 404ms\tremaining: 323ms\n",
            "25:\tlearn: 0.0311968\ttotal: 418ms\tremaining: 305ms\n",
            "26:\tlearn: 0.0299624\ttotal: 431ms\tremaining: 287ms\n",
            "27:\tlearn: 0.0295726\ttotal: 443ms\tremaining: 269ms\n",
            "28:\tlearn: 0.0272224\ttotal: 452ms\tremaining: 250ms\n",
            "29:\tlearn: 0.0260338\ttotal: 472ms\tremaining: 236ms\n",
            "30:\tlearn: 0.0247406\ttotal: 481ms\tremaining: 217ms\n",
            "31:\tlearn: 0.0232090\ttotal: 492ms\tremaining: 200ms\n",
            "32:\tlearn: 0.0223824\ttotal: 503ms\tremaining: 183ms\n",
            "33:\tlearn: 0.0208783\ttotal: 517ms\tremaining: 167ms\n",
            "34:\tlearn: 0.0196686\ttotal: 527ms\tremaining: 151ms\n",
            "35:\tlearn: 0.0190973\ttotal: 540ms\tremaining: 135ms\n",
            "36:\tlearn: 0.0181631\ttotal: 553ms\tremaining: 120ms\n",
            "37:\tlearn: 0.0172489\ttotal: 563ms\tremaining: 104ms\n",
            "38:\tlearn: 0.0165966\ttotal: 576ms\tremaining: 88.7ms\n",
            "39:\tlearn: 0.0159395\ttotal: 592ms\tremaining: 74ms\n",
            "40:\tlearn: 0.0150326\ttotal: 605ms\tremaining: 59ms\n",
            "41:\tlearn: 0.0144495\ttotal: 618ms\tremaining: 44.1ms\n",
            "42:\tlearn: 0.0142683\ttotal: 635ms\tremaining: 29.5ms\n",
            "43:\tlearn: 0.0133421\ttotal: 649ms\tremaining: 14.7ms\n",
            "44:\tlearn: 0.0125487\ttotal: 665ms\tremaining: 0us\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 1434, number of negative: 1446\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000427 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5072\n",
            "[LightGBM] [Info] Number of data points in the train set: 2880, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.497917 -> initscore=-0.008333\n",
            "[LightGBM] [Info] Start training from score -0.008333\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 1434, number of negative: 1446\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000426 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5060\n",
            "[LightGBM] [Info] Number of data points in the train set: 2880, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.497917 -> initscore=-0.008333\n",
            "[LightGBM] [Info] Start training from score -0.008333\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 1434, number of negative: 1446\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000457 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5053\n",
            "[LightGBM] [Info] Number of data points in the train set: 2880, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.497917 -> initscore=-0.008333\n",
            "[LightGBM] [Info] Start training from score -0.008333\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 1435, number of negative: 1445\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000471 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5066\n",
            "[LightGBM] [Info] Number of data points in the train set: 2880, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.498264 -> initscore=-0.006944\n",
            "[LightGBM] [Info] Start training from score -0.006944\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 1435, number of negative: 1445\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000535 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5070\n",
            "[LightGBM] [Info] Number of data points in the train set: 2880, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.498264 -> initscore=-0.006944\n",
            "[LightGBM] [Info] Start training from score -0.006944\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "0:\tlearn: 0.3463390\ttotal: 8.23ms\tremaining: 362ms\n",
            "1:\tlearn: 0.2094962\ttotal: 14.5ms\tremaining: 311ms\n",
            "2:\tlearn: 0.1536406\ttotal: 20.8ms\tremaining: 292ms\n",
            "3:\tlearn: 0.1300779\ttotal: 26.7ms\tremaining: 274ms\n",
            "4:\tlearn: 0.1231005\ttotal: 32.5ms\tremaining: 260ms\n",
            "5:\tlearn: 0.1127552\ttotal: 38.5ms\tremaining: 250ms\n",
            "6:\tlearn: 0.1047944\ttotal: 44.5ms\tremaining: 241ms\n",
            "7:\tlearn: 0.0870770\ttotal: 50.2ms\tremaining: 232ms\n",
            "8:\tlearn: 0.0823897\ttotal: 55.9ms\tremaining: 223ms\n",
            "9:\tlearn: 0.0781699\ttotal: 61.8ms\tremaining: 216ms\n",
            "10:\tlearn: 0.0723674\ttotal: 67.6ms\tremaining: 209ms\n",
            "11:\tlearn: 0.0698734\ttotal: 73.4ms\tremaining: 202ms\n",
            "12:\tlearn: 0.0663579\ttotal: 78.9ms\tremaining: 194ms\n",
            "13:\tlearn: 0.0630933\ttotal: 84.5ms\tremaining: 187ms\n",
            "14:\tlearn: 0.0596466\ttotal: 90.4ms\tremaining: 181ms\n",
            "15:\tlearn: 0.0552026\ttotal: 96.1ms\tremaining: 174ms\n",
            "16:\tlearn: 0.0521354\ttotal: 102ms\tremaining: 168ms\n",
            "17:\tlearn: 0.0484046\ttotal: 108ms\tremaining: 162ms\n",
            "18:\tlearn: 0.0451592\ttotal: 115ms\tremaining: 157ms\n",
            "19:\tlearn: 0.0426057\ttotal: 121ms\tremaining: 151ms\n",
            "20:\tlearn: 0.0406418\ttotal: 127ms\tremaining: 145ms\n",
            "21:\tlearn: 0.0398949\ttotal: 132ms\tremaining: 139ms\n",
            "22:\tlearn: 0.0357011\ttotal: 138ms\tremaining: 132ms\n",
            "23:\tlearn: 0.0330015\ttotal: 143ms\tremaining: 126ms\n",
            "24:\tlearn: 0.0327556\ttotal: 149ms\tremaining: 119ms\n",
            "25:\tlearn: 0.0310594\ttotal: 155ms\tremaining: 113ms\n",
            "26:\tlearn: 0.0291839\ttotal: 161ms\tremaining: 107ms\n",
            "27:\tlearn: 0.0270339\ttotal: 166ms\tremaining: 101ms\n",
            "28:\tlearn: 0.0248346\ttotal: 172ms\tremaining: 94.8ms\n",
            "29:\tlearn: 0.0241009\ttotal: 181ms\tremaining: 90.6ms\n",
            "30:\tlearn: 0.0224473\ttotal: 191ms\tremaining: 86.4ms\n",
            "31:\tlearn: 0.0219730\ttotal: 199ms\tremaining: 80.8ms\n",
            "32:\tlearn: 0.0217413\ttotal: 210ms\tremaining: 76.4ms\n",
            "33:\tlearn: 0.0207453\ttotal: 216ms\tremaining: 69.9ms\n",
            "34:\tlearn: 0.0200775\ttotal: 222ms\tremaining: 63.3ms\n",
            "35:\tlearn: 0.0197324\ttotal: 227ms\tremaining: 56.8ms\n",
            "36:\tlearn: 0.0193567\ttotal: 233ms\tremaining: 50.3ms\n",
            "37:\tlearn: 0.0188192\ttotal: 238ms\tremaining: 43.9ms\n",
            "38:\tlearn: 0.0184417\ttotal: 244ms\tremaining: 37.5ms\n",
            "39:\tlearn: 0.0174622\ttotal: 250ms\tremaining: 31.2ms\n",
            "40:\tlearn: 0.0173435\ttotal: 255ms\tremaining: 24.9ms\n",
            "41:\tlearn: 0.0157593\ttotal: 261ms\tremaining: 18.6ms\n",
            "42:\tlearn: 0.0152799\ttotal: 266ms\tremaining: 12.4ms\n",
            "43:\tlearn: 0.0148479\ttotal: 272ms\tremaining: 6.17ms\n",
            "44:\tlearn: 0.0147308\ttotal: 277ms\tremaining: 0us\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 182, number of negative: 1795\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000230 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 3003\n",
            "[LightGBM] [Info] Number of data points in the train set: 1977, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.092059 -> initscore=-2.288754\n",
            "[LightGBM] [Info] Start training from score -2.288754\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "0:\tlearn: 0.3463390\ttotal: 6.08ms\tremaining: 267ms\n",
            "1:\tlearn: 0.2094962\ttotal: 12.5ms\tremaining: 268ms\n",
            "2:\tlearn: 0.1536406\ttotal: 18.5ms\tremaining: 259ms\n",
            "3:\tlearn: 0.1300779\ttotal: 24.3ms\tremaining: 249ms\n",
            "4:\tlearn: 0.1231005\ttotal: 30.1ms\tremaining: 241ms\n",
            "5:\tlearn: 0.1127552\ttotal: 36ms\tremaining: 234ms\n",
            "6:\tlearn: 0.1047944\ttotal: 41.6ms\tremaining: 226ms\n",
            "7:\tlearn: 0.0870770\ttotal: 47.4ms\tremaining: 219ms\n",
            "8:\tlearn: 0.0823897\ttotal: 52.9ms\tremaining: 212ms\n",
            "9:\tlearn: 0.0781699\ttotal: 58.6ms\tremaining: 205ms\n",
            "10:\tlearn: 0.0723674\ttotal: 64.2ms\tremaining: 199ms\n",
            "11:\tlearn: 0.0698734\ttotal: 70ms\tremaining: 193ms\n",
            "12:\tlearn: 0.0663579\ttotal: 75.6ms\tremaining: 186ms\n",
            "13:\tlearn: 0.0630933\ttotal: 81.4ms\tremaining: 180ms\n",
            "14:\tlearn: 0.0596466\ttotal: 87.2ms\tremaining: 174ms\n",
            "15:\tlearn: 0.0552026\ttotal: 92.9ms\tremaining: 168ms\n",
            "16:\tlearn: 0.0521354\ttotal: 98.6ms\tremaining: 162ms\n",
            "17:\tlearn: 0.0484046\ttotal: 104ms\tremaining: 157ms\n",
            "18:\tlearn: 0.0451592\ttotal: 110ms\tremaining: 150ms\n",
            "19:\tlearn: 0.0426057\ttotal: 116ms\tremaining: 145ms\n",
            "20:\tlearn: 0.0406418\ttotal: 121ms\tremaining: 139ms\n",
            "21:\tlearn: 0.0398949\ttotal: 127ms\tremaining: 133ms\n",
            "22:\tlearn: 0.0357011\ttotal: 133ms\tremaining: 127ms\n",
            "23:\tlearn: 0.0330015\ttotal: 139ms\tremaining: 121ms\n",
            "24:\tlearn: 0.0327556\ttotal: 144ms\tremaining: 115ms\n",
            "25:\tlearn: 0.0310594\ttotal: 150ms\tremaining: 110ms\n",
            "26:\tlearn: 0.0291839\ttotal: 156ms\tremaining: 104ms\n",
            "27:\tlearn: 0.0270339\ttotal: 161ms\tremaining: 97.8ms\n",
            "28:\tlearn: 0.0248346\ttotal: 167ms\tremaining: 92.1ms\n",
            "29:\tlearn: 0.0241009\ttotal: 173ms\tremaining: 86.3ms\n",
            "30:\tlearn: 0.0224473\ttotal: 179ms\tremaining: 80.6ms\n",
            "31:\tlearn: 0.0219730\ttotal: 192ms\tremaining: 78.1ms\n",
            "32:\tlearn: 0.0217413\ttotal: 198ms\tremaining: 71.8ms\n",
            "33:\tlearn: 0.0207453\ttotal: 205ms\tremaining: 66.4ms\n",
            "34:\tlearn: 0.0200775\ttotal: 212ms\tremaining: 60.6ms\n",
            "35:\tlearn: 0.0197324\ttotal: 218ms\tremaining: 54.4ms\n",
            "36:\tlearn: 0.0193567\ttotal: 223ms\tremaining: 48.3ms\n",
            "37:\tlearn: 0.0188192\ttotal: 229ms\tremaining: 42.2ms\n",
            "38:\tlearn: 0.0184417\ttotal: 235ms\tremaining: 36.1ms\n",
            "39:\tlearn: 0.0174622\ttotal: 241ms\tremaining: 30.1ms\n",
            "40:\tlearn: 0.0173435\ttotal: 246ms\tremaining: 24ms\n",
            "41:\tlearn: 0.0157593\ttotal: 252ms\tremaining: 18ms\n",
            "42:\tlearn: 0.0152799\ttotal: 257ms\tremaining: 12ms\n",
            "43:\tlearn: 0.0148479\ttotal: 263ms\tremaining: 5.97ms\n",
            "44:\tlearn: 0.0147308\ttotal: 268ms\tremaining: 0us\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 182, number of negative: 1795\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000231 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 3003\n",
            "[LightGBM] [Info] Number of data points in the train set: 1977, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.092059 -> initscore=-2.288754\n",
            "[LightGBM] [Info] Start training from score -2.288754\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "0:\tlearn: 0.3306578\ttotal: 5.62ms\tremaining: 247ms\n",
            "1:\tlearn: 0.2190072\ttotal: 11.5ms\tremaining: 247ms\n",
            "2:\tlearn: 0.1599462\ttotal: 17.1ms\tremaining: 240ms\n",
            "3:\tlearn: 0.1237412\ttotal: 22.7ms\tremaining: 233ms\n",
            "4:\tlearn: 0.1134771\ttotal: 27.9ms\tremaining: 223ms\n",
            "5:\tlearn: 0.1042952\ttotal: 33.5ms\tremaining: 218ms\n",
            "6:\tlearn: 0.0993031\ttotal: 38.8ms\tremaining: 211ms\n",
            "7:\tlearn: 0.0901677\ttotal: 44ms\tremaining: 204ms\n",
            "8:\tlearn: 0.0856218\ttotal: 49.2ms\tremaining: 197ms\n",
            "9:\tlearn: 0.0778278\ttotal: 54.5ms\tremaining: 191ms\n",
            "10:\tlearn: 0.0721935\ttotal: 59.7ms\tremaining: 185ms\n",
            "11:\tlearn: 0.0646022\ttotal: 64.9ms\tremaining: 178ms\n",
            "12:\tlearn: 0.0574978\ttotal: 70ms\tremaining: 172ms\n",
            "13:\tlearn: 0.0517592\ttotal: 75.2ms\tremaining: 167ms\n",
            "14:\tlearn: 0.0497929\ttotal: 80.6ms\tremaining: 161ms\n",
            "15:\tlearn: 0.0472296\ttotal: 85.9ms\tremaining: 156ms\n",
            "16:\tlearn: 0.0406612\ttotal: 91.2ms\tremaining: 150ms\n",
            "17:\tlearn: 0.0380678\ttotal: 96.5ms\tremaining: 145ms\n",
            "18:\tlearn: 0.0353890\ttotal: 102ms\tremaining: 139ms\n",
            "19:\tlearn: 0.0319306\ttotal: 107ms\tremaining: 134ms\n",
            "20:\tlearn: 0.0309120\ttotal: 112ms\tremaining: 128ms\n",
            "21:\tlearn: 0.0297382\ttotal: 118ms\tremaining: 123ms\n",
            "22:\tlearn: 0.0288818\ttotal: 123ms\tremaining: 118ms\n",
            "23:\tlearn: 0.0278750\ttotal: 128ms\tremaining: 112ms\n",
            "24:\tlearn: 0.0268352\ttotal: 133ms\tremaining: 107ms\n",
            "25:\tlearn: 0.0258399\ttotal: 139ms\tremaining: 101ms\n",
            "26:\tlearn: 0.0252000\ttotal: 144ms\tremaining: 95.9ms\n",
            "27:\tlearn: 0.0238181\ttotal: 149ms\tremaining: 90.5ms\n",
            "28:\tlearn: 0.0230676\ttotal: 154ms\tremaining: 85.1ms\n",
            "29:\tlearn: 0.0219350\ttotal: 160ms\tremaining: 79.8ms\n",
            "30:\tlearn: 0.0217296\ttotal: 165ms\tremaining: 74.4ms\n",
            "31:\tlearn: 0.0216151\ttotal: 170ms\tremaining: 69ms\n",
            "32:\tlearn: 0.0214522\ttotal: 175ms\tremaining: 63.6ms\n",
            "33:\tlearn: 0.0207445\ttotal: 180ms\tremaining: 58.3ms\n",
            "34:\tlearn: 0.0206442\ttotal: 185ms\tremaining: 53ms\n",
            "35:\tlearn: 0.0186642\ttotal: 191ms\tremaining: 47.7ms\n",
            "36:\tlearn: 0.0181448\ttotal: 196ms\tremaining: 42.4ms\n",
            "37:\tlearn: 0.0177458\ttotal: 203ms\tremaining: 37.3ms\n",
            "38:\tlearn: 0.0167034\ttotal: 211ms\tremaining: 32.5ms\n",
            "39:\tlearn: 0.0165279\ttotal: 216ms\tremaining: 27ms\n",
            "40:\tlearn: 0.0161243\ttotal: 221ms\tremaining: 21.6ms\n",
            "41:\tlearn: 0.0157633\ttotal: 227ms\tremaining: 16.2ms\n",
            "42:\tlearn: 0.0156304\ttotal: 234ms\tremaining: 10.9ms\n",
            "43:\tlearn: 0.0148977\ttotal: 240ms\tremaining: 5.45ms\n",
            "44:\tlearn: 0.0147559\ttotal: 245ms\tremaining: 0us\n",
            "0:\tlearn: 0.3252105\ttotal: 10.1ms\tremaining: 444ms\n",
            "1:\tlearn: 0.2140433\ttotal: 15.9ms\tremaining: 342ms\n",
            "2:\tlearn: 0.1630247\ttotal: 21.5ms\tremaining: 301ms\n",
            "3:\tlearn: 0.1263536\ttotal: 26.9ms\tremaining: 276ms\n",
            "4:\tlearn: 0.1092657\ttotal: 32.2ms\tremaining: 258ms\n",
            "5:\tlearn: 0.1032792\ttotal: 37.7ms\tremaining: 245ms\n",
            "6:\tlearn: 0.0933604\ttotal: 42.8ms\tremaining: 232ms\n",
            "7:\tlearn: 0.0863169\ttotal: 48.2ms\tremaining: 223ms\n",
            "8:\tlearn: 0.0794923\ttotal: 53.5ms\tremaining: 214ms\n",
            "9:\tlearn: 0.0757929\ttotal: 58.8ms\tremaining: 206ms\n",
            "10:\tlearn: 0.0649791\ttotal: 63.9ms\tremaining: 198ms\n",
            "11:\tlearn: 0.0602022\ttotal: 69ms\tremaining: 190ms\n",
            "12:\tlearn: 0.0527589\ttotal: 74.4ms\tremaining: 183ms\n",
            "13:\tlearn: 0.0481125\ttotal: 79.8ms\tremaining: 177ms\n",
            "14:\tlearn: 0.0455929\ttotal: 85.4ms\tremaining: 171ms\n",
            "15:\tlearn: 0.0419607\ttotal: 90.6ms\tremaining: 164ms\n",
            "16:\tlearn: 0.0391247\ttotal: 96.2ms\tremaining: 158ms\n",
            "17:\tlearn: 0.0373032\ttotal: 101ms\tremaining: 152ms\n",
            "18:\tlearn: 0.0357397\ttotal: 107ms\tremaining: 146ms\n",
            "19:\tlearn: 0.0349671\ttotal: 112ms\tremaining: 140ms\n",
            "20:\tlearn: 0.0330028\ttotal: 117ms\tremaining: 134ms\n",
            "21:\tlearn: 0.0321672\ttotal: 123ms\tremaining: 128ms\n",
            "22:\tlearn: 0.0313068\ttotal: 133ms\tremaining: 127ms\n",
            "23:\tlearn: 0.0285571\ttotal: 138ms\tremaining: 121ms\n",
            "24:\tlearn: 0.0277566\ttotal: 145ms\tremaining: 116ms\n",
            "25:\tlearn: 0.0262365\ttotal: 150ms\tremaining: 110ms\n",
            "26:\tlearn: 0.0246277\ttotal: 156ms\tremaining: 104ms\n",
            "27:\tlearn: 0.0233914\ttotal: 161ms\tremaining: 97.7ms\n",
            "28:\tlearn: 0.0227374\ttotal: 166ms\tremaining: 91.6ms\n",
            "29:\tlearn: 0.0225768\ttotal: 172ms\tremaining: 85.8ms\n",
            "30:\tlearn: 0.0213332\ttotal: 177ms\tremaining: 79.9ms\n",
            "31:\tlearn: 0.0206713\ttotal: 183ms\tremaining: 74.3ms\n",
            "32:\tlearn: 0.0205156\ttotal: 188ms\tremaining: 68.4ms\n",
            "33:\tlearn: 0.0198709\ttotal: 194ms\tremaining: 62.6ms\n",
            "34:\tlearn: 0.0192221\ttotal: 199ms\tremaining: 56.9ms\n",
            "35:\tlearn: 0.0183509\ttotal: 206ms\tremaining: 51.5ms\n",
            "36:\tlearn: 0.0160907\ttotal: 213ms\tremaining: 46.1ms\n",
            "37:\tlearn: 0.0156646\ttotal: 220ms\tremaining: 40.6ms\n",
            "38:\tlearn: 0.0144820\ttotal: 226ms\tremaining: 34.7ms\n",
            "39:\tlearn: 0.0144211\ttotal: 231ms\tremaining: 28.8ms\n",
            "40:\tlearn: 0.0140978\ttotal: 236ms\tremaining: 23ms\n",
            "41:\tlearn: 0.0133443\ttotal: 241ms\tremaining: 17.2ms\n",
            "42:\tlearn: 0.0132717\ttotal: 246ms\tremaining: 11.4ms\n",
            "43:\tlearn: 0.0127408\ttotal: 251ms\tremaining: 5.71ms\n",
            "44:\tlearn: 0.0121527\ttotal: 256ms\tremaining: 0us\n",
            "0:\tlearn: 0.3507802\ttotal: 7.04ms\tremaining: 310ms\n",
            "1:\tlearn: 0.2214907\ttotal: 15.6ms\tremaining: 336ms\n",
            "2:\tlearn: 0.1701499\ttotal: 22ms\tremaining: 307ms\n",
            "3:\tlearn: 0.1330613\ttotal: 31.5ms\tremaining: 323ms\n",
            "4:\tlearn: 0.1224186\ttotal: 37.7ms\tremaining: 302ms\n",
            "5:\tlearn: 0.1098059\ttotal: 43.2ms\tremaining: 281ms\n",
            "6:\tlearn: 0.1024768\ttotal: 52ms\tremaining: 282ms\n",
            "7:\tlearn: 0.0883096\ttotal: 58.9ms\tremaining: 272ms\n",
            "8:\tlearn: 0.0808114\ttotal: 64.1ms\tremaining: 257ms\n",
            "9:\tlearn: 0.0737845\ttotal: 69.3ms\tremaining: 243ms\n",
            "10:\tlearn: 0.0654481\ttotal: 74.4ms\tremaining: 230ms\n",
            "11:\tlearn: 0.0607771\ttotal: 79.7ms\tremaining: 219ms\n",
            "12:\tlearn: 0.0567386\ttotal: 84.7ms\tremaining: 209ms\n",
            "13:\tlearn: 0.0496732\ttotal: 90ms\tremaining: 199ms\n",
            "14:\tlearn: 0.0465941\ttotal: 95.6ms\tremaining: 191ms\n",
            "15:\tlearn: 0.0421398\ttotal: 101ms\tremaining: 183ms\n",
            "16:\tlearn: 0.0388959\ttotal: 106ms\tremaining: 175ms\n",
            "17:\tlearn: 0.0383641\ttotal: 111ms\tremaining: 167ms\n",
            "18:\tlearn: 0.0370087\ttotal: 116ms\tremaining: 159ms\n",
            "19:\tlearn: 0.0353629\ttotal: 122ms\tremaining: 152ms\n",
            "20:\tlearn: 0.0332787\ttotal: 127ms\tremaining: 145ms\n",
            "21:\tlearn: 0.0327111\ttotal: 132ms\tremaining: 138ms\n",
            "22:\tlearn: 0.0314014\ttotal: 138ms\tremaining: 132ms\n",
            "23:\tlearn: 0.0310295\ttotal: 143ms\tremaining: 125ms\n",
            "24:\tlearn: 0.0302261\ttotal: 148ms\tremaining: 118ms\n",
            "25:\tlearn: 0.0299652\ttotal: 153ms\tremaining: 112ms\n",
            "26:\tlearn: 0.0289403\ttotal: 158ms\tremaining: 105ms\n",
            "27:\tlearn: 0.0271612\ttotal: 163ms\tremaining: 99.1ms\n",
            "28:\tlearn: 0.0256436\ttotal: 168ms\tremaining: 92.9ms\n",
            "29:\tlearn: 0.0255300\ttotal: 173ms\tremaining: 86.7ms\n",
            "30:\tlearn: 0.0227616\ttotal: 179ms\tremaining: 80.7ms\n",
            "31:\tlearn: 0.0224256\ttotal: 184ms\tremaining: 74.7ms\n",
            "32:\tlearn: 0.0214063\ttotal: 189ms\tremaining: 68.8ms\n",
            "33:\tlearn: 0.0212867\ttotal: 194ms\tremaining: 62.9ms\n",
            "34:\tlearn: 0.0207326\ttotal: 199ms\tremaining: 57ms\n",
            "35:\tlearn: 0.0200176\ttotal: 205ms\tremaining: 51.2ms\n",
            "36:\tlearn: 0.0191331\ttotal: 210ms\tremaining: 45.4ms\n",
            "37:\tlearn: 0.0187657\ttotal: 215ms\tremaining: 39.7ms\n",
            "38:\tlearn: 0.0173937\ttotal: 221ms\tremaining: 34.1ms\n",
            "39:\tlearn: 0.0166535\ttotal: 227ms\tremaining: 28.4ms\n",
            "40:\tlearn: 0.0165930\ttotal: 234ms\tremaining: 22.8ms\n",
            "41:\tlearn: 0.0161782\ttotal: 240ms\tremaining: 17.1ms\n",
            "42:\tlearn: 0.0161194\ttotal: 245ms\tremaining: 11.4ms\n",
            "43:\tlearn: 0.0156560\ttotal: 255ms\tremaining: 5.79ms\n",
            "44:\tlearn: 0.0152486\ttotal: 263ms\tremaining: 0us\n",
            "0:\tlearn: 0.3416851\ttotal: 5.57ms\tremaining: 245ms\n",
            "1:\tlearn: 0.2018961\ttotal: 11.1ms\tremaining: 239ms\n",
            "2:\tlearn: 0.1548663\ttotal: 16.5ms\tremaining: 232ms\n",
            "3:\tlearn: 0.1347677\ttotal: 22.1ms\tremaining: 226ms\n",
            "4:\tlearn: 0.1162685\ttotal: 27.6ms\tremaining: 221ms\n",
            "5:\tlearn: 0.1035251\ttotal: 33.2ms\tremaining: 216ms\n",
            "6:\tlearn: 0.0861218\ttotal: 38.6ms\tremaining: 210ms\n",
            "7:\tlearn: 0.0807653\ttotal: 44ms\tremaining: 203ms\n",
            "8:\tlearn: 0.0716042\ttotal: 49.4ms\tremaining: 198ms\n",
            "9:\tlearn: 0.0646724\ttotal: 54.5ms\tremaining: 191ms\n",
            "10:\tlearn: 0.0585807\ttotal: 59.8ms\tremaining: 185ms\n",
            "11:\tlearn: 0.0563353\ttotal: 64.8ms\tremaining: 178ms\n",
            "12:\tlearn: 0.0544545\ttotal: 69.9ms\tremaining: 172ms\n",
            "13:\tlearn: 0.0521244\ttotal: 75ms\tremaining: 166ms\n",
            "14:\tlearn: 0.0473626\ttotal: 80.1ms\tremaining: 160ms\n",
            "15:\tlearn: 0.0433275\ttotal: 85.5ms\tremaining: 155ms\n",
            "16:\tlearn: 0.0387373\ttotal: 90.6ms\tremaining: 149ms\n",
            "17:\tlearn: 0.0360731\ttotal: 95.9ms\tremaining: 144ms\n",
            "18:\tlearn: 0.0348823\ttotal: 103ms\tremaining: 140ms\n",
            "19:\tlearn: 0.0339272\ttotal: 108ms\tremaining: 135ms\n",
            "20:\tlearn: 0.0322415\ttotal: 114ms\tremaining: 131ms\n",
            "21:\tlearn: 0.0309775\ttotal: 122ms\tremaining: 127ms\n",
            "22:\tlearn: 0.0299908\ttotal: 131ms\tremaining: 126ms\n",
            "23:\tlearn: 0.0295392\ttotal: 137ms\tremaining: 120ms\n",
            "24:\tlearn: 0.0281066\ttotal: 142ms\tremaining: 114ms\n",
            "25:\tlearn: 0.0275774\ttotal: 147ms\tremaining: 108ms\n",
            "26:\tlearn: 0.0261488\ttotal: 153ms\tremaining: 102ms\n",
            "27:\tlearn: 0.0252215\ttotal: 158ms\tremaining: 96.1ms\n",
            "28:\tlearn: 0.0241855\ttotal: 168ms\tremaining: 92.8ms\n",
            "29:\tlearn: 0.0225278\ttotal: 173ms\tremaining: 86.7ms\n",
            "30:\tlearn: 0.0220158\ttotal: 179ms\tremaining: 80.7ms\n",
            "31:\tlearn: 0.0209031\ttotal: 184ms\tremaining: 74.7ms\n",
            "32:\tlearn: 0.0205145\ttotal: 189ms\tremaining: 68.8ms\n",
            "33:\tlearn: 0.0182534\ttotal: 195ms\tremaining: 63ms\n",
            "34:\tlearn: 0.0180394\ttotal: 200ms\tremaining: 57.1ms\n",
            "35:\tlearn: 0.0179744\ttotal: 205ms\tremaining: 51.2ms\n",
            "36:\tlearn: 0.0168556\ttotal: 210ms\tremaining: 45.5ms\n",
            "37:\tlearn: 0.0167648\ttotal: 216ms\tremaining: 39.7ms\n",
            "38:\tlearn: 0.0165472\ttotal: 221ms\tremaining: 34.1ms\n",
            "39:\tlearn: 0.0161959\ttotal: 227ms\tremaining: 28.4ms\n",
            "40:\tlearn: 0.0159921\ttotal: 232ms\tremaining: 22.7ms\n",
            "41:\tlearn: 0.0152700\ttotal: 238ms\tremaining: 17ms\n",
            "42:\tlearn: 0.0141328\ttotal: 243ms\tremaining: 11.3ms\n",
            "43:\tlearn: 0.0136836\ttotal: 248ms\tremaining: 5.64ms\n",
            "44:\tlearn: 0.0133073\ttotal: 254ms\tremaining: 0us\n",
            "0:\tlearn: 0.3203678\ttotal: 5.97ms\tremaining: 263ms\n",
            "1:\tlearn: 0.2301870\ttotal: 11.8ms\tremaining: 254ms\n",
            "2:\tlearn: 0.1582099\ttotal: 17.9ms\tremaining: 251ms\n",
            "3:\tlearn: 0.1258032\ttotal: 23.7ms\tremaining: 243ms\n",
            "4:\tlearn: 0.1153471\ttotal: 29.3ms\tremaining: 235ms\n",
            "5:\tlearn: 0.1057412\ttotal: 35.1ms\tremaining: 228ms\n",
            "6:\tlearn: 0.0984675\ttotal: 42ms\tremaining: 228ms\n",
            "7:\tlearn: 0.0923362\ttotal: 47.6ms\tremaining: 220ms\n",
            "8:\tlearn: 0.0906927\ttotal: 52.7ms\tremaining: 211ms\n",
            "9:\tlearn: 0.0837586\ttotal: 58.1ms\tremaining: 203ms\n",
            "10:\tlearn: 0.0799747\ttotal: 63.3ms\tremaining: 196ms\n",
            "11:\tlearn: 0.0742284\ttotal: 70.1ms\tremaining: 193ms\n",
            "12:\tlearn: 0.0697189\ttotal: 75.7ms\tremaining: 186ms\n",
            "13:\tlearn: 0.0640015\ttotal: 84.5ms\tremaining: 187ms\n",
            "14:\tlearn: 0.0622853\ttotal: 89.5ms\tremaining: 179ms\n",
            "15:\tlearn: 0.0541554\ttotal: 94.9ms\tremaining: 172ms\n",
            "16:\tlearn: 0.0461053\ttotal: 100ms\tremaining: 165ms\n",
            "17:\tlearn: 0.0434782\ttotal: 105ms\tremaining: 158ms\n",
            "18:\tlearn: 0.0404057\ttotal: 112ms\tremaining: 153ms\n",
            "19:\tlearn: 0.0394008\ttotal: 118ms\tremaining: 147ms\n",
            "20:\tlearn: 0.0375629\ttotal: 123ms\tremaining: 141ms\n",
            "21:\tlearn: 0.0367973\ttotal: 132ms\tremaining: 138ms\n",
            "22:\tlearn: 0.0355918\ttotal: 141ms\tremaining: 135ms\n",
            "23:\tlearn: 0.0330653\ttotal: 147ms\tremaining: 129ms\n",
            "24:\tlearn: 0.0323170\ttotal: 152ms\tremaining: 122ms\n",
            "25:\tlearn: 0.0306017\ttotal: 158ms\tremaining: 115ms\n",
            "26:\tlearn: 0.0278603\ttotal: 163ms\tremaining: 109ms\n",
            "27:\tlearn: 0.0275019\ttotal: 168ms\tremaining: 102ms\n",
            "28:\tlearn: 0.0269525\ttotal: 173ms\tremaining: 95.7ms\n",
            "29:\tlearn: 0.0264797\ttotal: 179ms\tremaining: 89.3ms\n",
            "30:\tlearn: 0.0263004\ttotal: 184ms\tremaining: 83ms\n",
            "31:\tlearn: 0.0248354\ttotal: 189ms\tremaining: 76.7ms\n",
            "32:\tlearn: 0.0241750\ttotal: 194ms\tremaining: 70.5ms\n",
            "33:\tlearn: 0.0231067\ttotal: 199ms\tremaining: 64.5ms\n",
            "34:\tlearn: 0.0222956\ttotal: 205ms\tremaining: 58.5ms\n",
            "35:\tlearn: 0.0222056\ttotal: 210ms\tremaining: 52.5ms\n",
            "36:\tlearn: 0.0213545\ttotal: 216ms\tremaining: 46.6ms\n",
            "37:\tlearn: 0.0193246\ttotal: 221ms\tremaining: 40.8ms\n",
            "38:\tlearn: 0.0179174\ttotal: 227ms\tremaining: 34.9ms\n",
            "39:\tlearn: 0.0175901\ttotal: 232ms\tremaining: 29.1ms\n",
            "40:\tlearn: 0.0167437\ttotal: 238ms\tremaining: 23.2ms\n",
            "41:\tlearn: 0.0163649\ttotal: 244ms\tremaining: 17.4ms\n",
            "42:\tlearn: 0.0150010\ttotal: 251ms\tremaining: 11.7ms\n",
            "43:\tlearn: 0.0148475\ttotal: 258ms\tremaining: 5.87ms\n",
            "44:\tlearn: 0.0144433\ttotal: 265ms\tremaining: 0us\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 145, number of negative: 1436\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000203 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 2713\n",
            "[LightGBM] [Info] Number of data points in the train set: 1581, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.091714 -> initscore=-2.292883\n",
            "[LightGBM] [Info] Start training from score -2.292883\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 145, number of negative: 1436\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000195 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 2741\n",
            "[LightGBM] [Info] Number of data points in the train set: 1581, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.091714 -> initscore=-2.292883\n",
            "[LightGBM] [Info] Start training from score -2.292883\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 146, number of negative: 1436\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000186 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 2715\n",
            "[LightGBM] [Info] Number of data points in the train set: 1582, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.092288 -> initscore=-2.286010\n",
            "[LightGBM] [Info] Start training from score -2.286010\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 146, number of negative: 1436\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000202 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 2645\n",
            "[LightGBM] [Info] Number of data points in the train set: 1582, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.092288 -> initscore=-2.286010\n",
            "[LightGBM] [Info] Start training from score -2.286010\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 146, number of negative: 1436\n",
            "[LightGBM] [Warning] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000251 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 2614\n",
            "[LightGBM] [Info] Number of data points in the train set: 1582, number of used features: 20\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.092288 -> initscore=-2.286010\n",
            "[LightGBM] [Info] Start training from score -2.286010\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x350 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
